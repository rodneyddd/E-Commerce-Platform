[{"/Users/rodneydaniel/git/E-Commerce-Platform/src/index.js":"1","/Users/rodneydaniel/git/E-Commerce-Platform/src/App.js":"2","/Users/rodneydaniel/git/E-Commerce-Platform/src/reportWebVitals.js":"3","/Users/rodneydaniel/git/E-Commerce-Platform/src/Components/About/About.js":"4","/Users/rodneydaniel/git/E-Commerce-Platform/src/Components/Catering/Catering.js":"5","/Users/rodneydaniel/git/E-Commerce-Platform/src/Components/Home/Home.js":"6","/Users/rodneydaniel/git/E-Commerce-Platform/src/Components/IceCream/IceCream.js":"7","/Users/rodneydaniel/git/E-Commerce-Platform/src/Components/Navbar/Navbar.js":"8","/Users/rodneydaniel/git/E-Commerce-Platform/src/Components/Cart/Cart.js":"9"},{"size":535,"mtime":1692224238368,"results":"10","hashOfConfig":"11"},{"size":1733,"mtime":1696525445099,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1692224238369,"results":"13","hashOfConfig":"11"},{"size":2387,"mtime":1694639912005,"results":"14","hashOfConfig":"11"},{"size":5988,"mtime":1694671390825,"results":"15","hashOfConfig":"11"},{"size":3510,"mtime":1694562089085,"results":"16","hashOfConfig":"11"},{"size":10346,"mtime":1696525568930,"results":"17","hashOfConfig":"11"},{"size":480,"mtime":1694579230909,"results":"18","hashOfConfig":"11"},{"size":808,"mtime":1696524565335,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"xxg22o",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/rodneydaniel/git/E-Commerce-Platform/src/index.js",[],[],"/Users/rodneydaniel/git/E-Commerce-Platform/src/App.js",["48","49"],[],"/Users/rodneydaniel/git/E-Commerce-Platform/src/reportWebVitals.js",[],[],"/Users/rodneydaniel/git/E-Commerce-Platform/src/Components/About/About.js",[],[],"/Users/rodneydaniel/git/E-Commerce-Platform/src/Components/Catering/Catering.js",[],[],"/Users/rodneydaniel/git/E-Commerce-Platform/src/Components/Home/Home.js",["50","51","52"],[],"/Users/rodneydaniel/git/E-Commerce-Platform/src/Components/IceCream/IceCream.js",["53","54","55","56"],[],"import \"./IceCream.css\"\nimport React, { useState, useEffect } from 'react';\nimport Navbar from \"../Navbar/Navbar\";\nimport Cart from \"../Cart/Cart\";\n\nfunction IceCream(props){\n\n    const [selectedFlavors, setSelectedFlavors] = useState([]);\n\n    const flavors = [\n        { name: 'Vanilla', src: '../../../assets/vanilla.jpeg', imageClass: 'imv', textClass: 'image-textv' },\n        { name: 'Chocolate', src: './assets/chocolate.jpeg', imageClass: 'imchoco', textClass: 'image-textcho' },\n        { name: 'Strawberry', src: '/assets/strawberry.jpeg', imageClass: 'imstraw', textClass: 'image-textstraw' },\n        { name: 'Rocky Road', src: '../assets/rockyroad.jpeg', imageClass: 'imRR', textClass: 'image-textRR'},\n        { name: 'Cookies & Cream', src: '../assets/cookiescream.jpeg', imageClass: 'imCCr', textClass: 'image-textCCr'},\n        { name: 'Cookie Dough', src: '../../assets/cookiedough.jpeg', imageClass: 'imCD', textClass: 'image-textCD'},\n        { name: 'Dulce de Leche', src: '/assets/dulce.jpeg', imageClass: 'imDDL', textClass: 'image-textDDL'},\n        { name: 'Caramel Cone', src: '/assets/CaraCone.jpeg', imageClass: 'imCC', textClass: 'image-textCC'},\n        { name: 'Pralines & Cream', src: '/assets/Praline.jpeg', imageClass: 'imPnC', textClass: 'image-textPnC'},\n        { name: 'Mint Chip', src: '/assets/mint.jpeg', imageClass: 'imMC', textClass: 'image-textMC'},\n        { name: 'Midnight Cookies & Cream', src: '../assets/Midnight.jpg', imageClass: 'imMCC', textClass: 'image-textMCC'},\n        { name: 'Belgian Chocolate', src: '/assets/belgianchoco.jpeg', imageClass: 'imBC', textClass: 'image-textBC'},\n        { name: 'Brownies A La Mode', src: '../assets/brownie.png', imageClass: 'imBALM', textClass: 'image-textBALM'},\n        { name: 'Butter Pecan', src: '/assets/butterpecan.jpeg', imageClass: 'imBP', textClass: 'image-textBP'},\n        { name: 'Vanilla Swiss Almond', src: '/assets/VanillaSA.jpeg', imageClass: 'imVSA', textClass: 'image-textVSA'},\n        { name: 'Coffee', src: '/assets/coffee.jpeg', imageClass: 'imCoff', textClass: 'image-textCoff'},\n        { name: 'Coffee Chip', src: '/assets/coffeechip.jpeg', imageClass: 'imCoffChip', textClass: 'image-textCoffChip'},\n        { name: 'Pineapple Coconut', src: '/assets/pineapplecoco.jpeg', imageClass: 'imPC', textClass: 'image-textPC' },\n        { name: 'Irish Cream Brownie', src: '/assets/irishcream.png', imageClass: 'imICB', textClass: 'image-textICB' },\n        { name: 'Vanilla Chocolate Chip', src: '/assets/vanillachocochip.jpeg', imageClass: 'imVCC', textClass: 'image-textVCC' },\n        { name: 'Rum Raisin', src: '/assets/rumraisin.jpeg', imageClass: 'imRumR', textClass: 'image-textRumR' },\n        { name: 'Pistachio', src: '/assets/pistachio.jpeg', imageClass: 'imPist', textClass: 'image-textPist' },\n        { name: 'Chocolate Peanut Butter Pretzel', src: '/assets/CPBP.png', imageClass: 'imCPBP', textClass: 'image-textCPBP' },\n        { name: 'White Chocolate Raspberry', src: '/assets/WCR.jpeg', imageClass: 'imWCR', textClass: 'image-textWCR' },\n        { name: 'Sea Salt Caramel Truffle', src: '/assets/IMG-0505.JPG', imageClass: 'imSSCT', textClass: 'image-textSSCT' },\n        \n        ];\n\n        const [selectedFlavorsTop, setSelectedFlavorsTop] = useState(0);\n\n        useEffect(() => {\n            const selectedFlavorsBox = document.getElementById(\"selected-flavors\"); //gets id of selected flavor\n            const slideTop = document.querySelector(\".icparallax-2\").offsetTop;\n            //.offsetTop is a property that returns the distance from the top of the element's parent container to the top of the element itself.\n            //The result of this line is stored in the slideTop variable, \n            //representing the vertical position of the top of the second parallax section.\n            const maxTop = slideTop + document.querySelector(\".icparallax-2\").clientHeight - selectedFlavorsBox.clientHeight;\n            //clientheight is the height of the parallax 2 section\n            //so when you subtract it by the height of the boxes.height\n            //you get the maximum scroll position\n    \n\n            //functions in javascript often have constant variables assigned to them instead \n            const handleScroll = () => {\n                const scrollTop = window.scrollY;\n                //current scroll position of the user\n                if (scrollTop >= slideTop && scrollTop <= maxTop) \n                // checks if the user's scroll position is within the section where you want the selected flavors box to move.\n                {\n                    //If the scroll position is within the desired range, this line updates the selectedFlavorsTop state variable.\n                    //The value being set is the difference between the current scroll position (scrollTop) \n                    //and the starting position of the parallax section (slideTop).\n                    setSelectedFlavorsTop(scrollTop - slideTop); //\n                }\n            };\n    \n            window.addEventListener(\"scroll\", handleScroll); //when the user scrolls the above thing will happen\n    \n            return () => {\n                window.removeEventListener(\"scroll\", handleScroll); //preventing memory leaks\n            };\n        }, []);\n\n        let itemcount = 0;\n        const toggleFlavor = (flavorName) => {\n            const index = selectedFlavors.indexOf(flavorName);\n            // getting the index of the clicked flavor in the selectedFlavors array\n            if (index === -1) \n            //if the flavor is not already selected, because its not in the array yet\n            {\n                if (selectedFlavors.length < 2) \n                {\n                    setSelectedFlavors(prevSelectedFlavors => [...prevSelectedFlavors, flavorName]);\n                    //creates a new array that includes the previous selected flavors and the newly selected flavor.\n                } \n                else {\n                    // Show a message saying the user can't select more than two flavors\n                    alert(\"You can only select up to two flavors.\");\n                }\n            } \n            else {\n                setSelectedFlavors(prevSelectedFlavors => prevSelectedFlavors.filter(flavor => flavor !== flavorName));\n                //the .filter() makes a new array, \n                // (flavor => flavor !== flavorName) checks if each flavor is not equal to flavorName.\n                \n            }\n            //this else makes the flavor get unclicked\n        };\n\n        const confirmSelection = (updateCartItemCount, openCart) => {\n            if (selectedFlavors.length === 0) {\n              alert(\"You need to select at least one flavor.\");\n            } else if (selectedFlavors.length === 1) {\n              if (window.confirm(\"Are you sure you only want one flavor?\")) {\n                // Perform any necessary actions for one flavor selection\n              }\n            } else if (selectedFlavors.length === 2) {\n              if (window.confirm(\"Are you sure you want these two flavors?\")) {\n                // Perform any necessary actions for two flavor selection\n              }\n            }\n          \n            // Update the cart count\n            \n            setcartitems(cartitems + 1);\n          \n            // Open the cart when a selection is confirmed\n            openCart();\n          };\n          \n        \n\n        //The window.confirm method is a built-in JavaScript function\n        // that displays a confirmation dialog box with a message and two buttons: \"OK\" and \"Cancel.\"\n\n        const clearSelection = () => {\n            setSelectedFlavors([]); // Clear the selected flavors array\n          };\n\n\n        // State to track the number of items in the cart\n        const [cartItemCount, setCartItemCount] = useState(0);\n\n        // updating cart count\n        const updateCartItemCount = (count) => {\n            setCartItemCount(count);\n        };\n\n        const [isCartOpen, setIsCartOpen] = useState(false); // State to manage cart visibility\n\n  \n\n        const openCart = () => {\n            setIsCartOpen(true);\n        };\n        \n\n    return(\n    <>\n        \n        <Navbar/>\n\n        <div class=\"icparallax-1\">\n\n            <div class=\"icparallax-content\">\n                <h1>We have many different flavors to choose from!</h1>\n                <h2>Click on a flavor to get started!</h2>\n                <h4>(Unclick to remove them)</h4>\n            </div>\n        </div>\n\n        <div class=\"icparallax-2\">\n            <div class=\"image-grid\">\n                {flavors.map((flavor,index) => (\n                    <div key = {index} className=\"image-with-text\" onClick={() => toggleFlavor(flavor.name)}>\n                        <img src={flavor.src} className={flavor.imageClass} alt={`Image of ${flavor.name}`} />\n                        <p className={flavor.textClass}>{flavor.name}</p>\n                    </div>\n                ))}\n            </div> \n           \n\n            <div id=\"selected-flavors\" style={{ top: `${selectedFlavorsTop}px` }}>\n            {/* top is a css property mean to determine the distance from the top edge of the element's containing block */}\n            {/* px specifies pixels */}\n                <h2>Selected Flavors:</h2>\n                <ul id=\"flavor-list\">\n                    {selectedFlavors.map((flavor, index) => (\n                        <li key={index}>{flavor}</li>\n                    ))}\n                </ul>\n                <button id=\"confirm-button\" onClick={() => confirmSelection(updateCartItemCount, openCart)}>\n                    Confirm Selection\n                </button>\n                <button id=\"clear-button\" onClick={clearSelection}>\n                    Clear All Flavors\n                </button>\n            </div>\n\n            {isCartOpen && <Cart itemCount={cartItemCount} />}\n        </div>\n\n        \n\n        <div class=\"icparallax-last\">\n            <div class=\"icpara3-content\">\n                <h2>Contact Us</h2>\n                <p>Address: 1306 2nd Avenue, Manhattan, New York</p>\n                <p>Email: info@haagendazs.com</p>\n                <p>Phone: +1 (646) 484 5897</p>\n                <p>Opening Hours: Mon-Sun: 11:00 AM - 11:00 PM</p>\n            </div>\n        </div>\n\n\n\n    </>\n\n    );\n}\n\nexport default IceCream;","/Users/rodneydaniel/git/E-Commerce-Platform/src/Components/Navbar/Navbar.js",[],[],"/Users/rodneydaniel/git/E-Commerce-Platform/src/Components/Cart/Cart.js",[],[],{"ruleId":"57","severity":1,"message":"58","line":29,"column":10,"nodeType":"59","messageId":"60","endLine":29,"endColumn":19},{"ruleId":"57","severity":1,"message":"61","line":29,"column":21,"nodeType":"59","messageId":"60","endLine":29,"endColumn":33},{"ruleId":"57","severity":1,"message":"62","line":3,"column":17,"nodeType":"59","messageId":"60","endLine":3,"endColumn":25},{"ruleId":"57","severity":1,"message":"63","line":5,"column":8,"nodeType":"59","messageId":"60","endLine":5,"endColumn":13},{"ruleId":"57","severity":1,"message":"64","line":6,"column":8,"nodeType":"59","messageId":"60","endLine":6,"endColumn":16},{"ruleId":"57","severity":1,"message":"65","line":74,"column":13,"nodeType":"59","messageId":"60","endLine":74,"endColumn":22},{"ruleId":"66","severity":2,"message":"67","line":115,"column":13,"nodeType":"59","messageId":"68","endLine":115,"endColumn":25},{"ruleId":"66","severity":2,"message":"69","line":115,"column":26,"nodeType":"59","messageId":"68","endLine":115,"endColumn":35},{"ruleId":"70","severity":1,"message":"71","line":166,"column":25,"nodeType":"72","endLine":166,"endColumn":111},"no-unused-vars","'cartitems' is assigned a value but never used.","Identifier","unusedVar","'setcartitems' is assigned a value but never used.","'useState' is defined but never used.","'About' is defined but never used.","'IceCream' is defined but never used.","'itemcount' is assigned a value but never used.","no-undef","'setcartitems' is not defined.","undef","'cartitems' is not defined.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement"]